<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Map on 拳拳到肉</title>
    <link>/tags/map/</link>
    <description>Recent content in Map on 拳拳到肉</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 19 Mar 2020 10:30:42 +0800</lastBuildDate>
    
	<atom:link href="/tags/map/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>并发集合——ConcurrentHashMap 源码分析</title>
      <link>/blog/%E5%B9%B6%E5%8F%91%E9%9B%86%E5%90%88concurrenthashmap-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Thu, 19 Mar 2020 10:30:42 +0800</pubDate>
      
      <guid>/blog/%E5%B9%B6%E5%8F%91%E9%9B%86%E5%90%88concurrenthashmap-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>ConcurrentHashMap是HashMap的线程安全版本，内部也是使用（数组 + 链表 + 红黑树）的结构来存储元素。</description>
    </item>
    
    <item>
      <title>并发集合——ConcurrentSkipListMap 源码分析</title>
      <link>/blog/%E5%B9%B6%E5%8F%91%E9%9B%86%E5%90%88concurrentskiplistmap-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Thu, 19 Mar 2020 10:30:42 +0800</pubDate>
      
      <guid>/blog/%E5%B9%B6%E5%8F%91%E9%9B%86%E5%90%88concurrentskiplistmap-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>跳表是一个随机化的数据结构，实质就是一种可以进行二分查找的有序链表。</description>
    </item>
    
    <item>
      <title>HashMap 源码分析</title>
      <link>/blog/hashmap-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Thu, 19 Mar 2020 10:20:42 +0800</pubDate>
      
      <guid>/blog/hashmap-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>HashMap 采用key/value存储结构，每个key 对应唯一的value，查询和修改的速度都很快，能达到O(1)的平均时间复杂度。它是非线程安全的，且不保证元素存储的顺序。</description>
    </item>
    
    <item>
      <title>LinkedHashMap 源码分析</title>
      <link>/blog/linkedhashmap-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 08 Mar 2020 16:37:42 +0800</pubDate>
      
      <guid>/blog/linkedhashmap-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>LinkedHashMap 继承HashMap，拥有HashMap的所有特性，并且添加了顺序访问的特点，HashMap是无序的内部维护一个双向链表， 能保证元素的插入是顺序访问的，也能以访问顺序访问，可以用来实现LRU缓存策略。</description>
    </item>
    
    <item>
      <title>WeakHashMap 源码分析</title>
      <link>/blog/weakhashmap-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 08 Mar 2020 16:37:42 +0800</pubDate>
      
      <guid>/blog/weakhashmap-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>WeakHashMap是一种弱引用map，内部的key会存储为弱引用，当jvm gc的时候，如果这些key没有强引用存在的话，会被gc回收掉，下一次当我们操作map的时候会把对应的Entry整个删除掉，基于这种特性，WeakHashMap特别适用于缓存处理。</description>
    </item>
    
  </channel>
</rss>