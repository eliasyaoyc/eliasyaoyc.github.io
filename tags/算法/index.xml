<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on 拳拳到肉</title>
    <link>/tags/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on 拳拳到肉</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 08 Mar 2020 16:37:42 +0800</lastBuildDate>
    
	<atom:link href="/tags/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>动态规划经典问题- 股票买卖</title>
      <link>/blog/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98-%E8%82%A1%E7%A5%A8%E4%B9%B0%E5%8D%96/</link>
      <pubDate>Sun, 08 Mar 2020 16:37:42 +0800</pubDate>
      
      <guid>/blog/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98-%E8%82%A1%E7%A5%A8%E4%B9%B0%E5%8D%96/</guid>
      <description>来自于LeetCode liweiwei1419 股票问题通用解法自我总结 以188号问题为例: 题目： 给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。 设计一</description>
    </item>
    
    <item>
      <title>如何实现LFU算法</title>
      <link>/blog/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0lfu%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sun, 08 Mar 2020 16:37:42 +0800</pubDate>
      
      <guid>/blog/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0lfu%E7%AE%97%E6%B3%95/</guid>
      <description>设计并实现最不经常使用（LFU）缓存的数据结构。它应该支持以下操作：get 和 put。 get(key) - 如果键存在于缓存中，则获取键的值（总是正数），否则返</description>
    </item>
    
    <item>
      <title>如何实现LRU算法</title>
      <link>/blog/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0lru%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sun, 08 Mar 2020 15:37:42 +0800</pubDate>
      
      <guid>/blog/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0lru%E7%AE%97%E6%B3%95/</guid>
      <description>LRU 缓存淘汰算法就是一种常用策略。LRU 的全称是 Least Recently Used，也就是说我们认为最近使用过的数据应该是是「有用的」，很久都没用过的数据应该是无用</description>
    </item>
    
  </channel>
</rss>